:"round x to y digits"
rdnd::{(_x*10^y)%(10^y)}

:"return the xth fibonacci number"
fib::{*(x-1){(+/x),*x}:*[1]}

:"euclidean norm"
norm.eucl::{sqr(+/{x^2}'x)}

:"predicate that returns whether a number is perfect"
perf::{[n];n::x;:[n=1;1;n=+/flr({0=n!x};1+!x-1)]}

:"self sort: because klong lacks the 'self' adverb (afaik),"
:"this function takes a list and sorts it after its own grade"
ssa::{x@<x}
ssd::{x@>x}

:"set difference. Seems to be O(n), but a big constant factor."
without::{[b];b::y;flr({[]~b?x};x)}

:"convert x to a binary representation, y digits"
:"simple recursive solution, fast enough"
bin1::{:[0>y;[]:|0>x-2^y;0,.f(x;y-1);1,.f(x-2^y;y-1)]}
:"Dave's solution"
bin2::{(-x)#(&x),{:[x;.f(x:%2),x!2;0]}:(y)}

:"Convert x to a binary array"
bin::{bin1(x;_log(2;x))}

:"calculates the inversion of a sequence"
inv::{+/,/{(*x)>:\1_x}'{x_1}\~x}

:"cut a list into pieces of length x each, with the rest at the end"
rk::{(x+x*!_((#y)%x)-.e):_y}

:"return x random numbers between 0 and 1"
rn.f::{x{x,.rn()}:*[]}
:"return x random numbers either 0 or 1"
rn.b::{0.5>f(x)}
:"return x random integers in the range y..z"
rn.i::{y+_f(x)*1+z-y}
